/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2019-05-22 15:17:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class file_005finc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\r\n");
      out.write("<meta http-equiv=\"Cache-Control\" content=\"no-store\" />\r\n");
      out.write("<meta http-equiv=\"Pragma\" content=\"no-cache\" />\r\n");
      out.write("<meta http-equiv=\"Expires\" content=\"0\" />\r\n");
 
	String downFlag=Math.random()+"";
 	session.setAttribute("downFlag", downFlag);

      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath() );
      out.write("/js/jquery/ajaxfileupload.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath() );
      out.write("/js/jquery/jquery.base64.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("    //-------------文件下载-----------\r\n");
      out.write("    var ROOT_URL=\"");
      out.print(request.getContextPath());
      out.write("\";\r\n");
      out.write("    var file_iframe_src = ROOT_URL+'/FileDownload?downloadFileName=';\r\n");
      out.write("    var downFlag2=\"");
      out.print(downFlag);
      out.write("\";\r\n");
      out.write("    \r\n");
      out.write("    //下载文件\r\n");
      out.write("    function fileDownload(downloadFileName,saveFileName){\r\n");
      out.write("    \tdownFlag2=parseFloat(downFlag2)*21.9+\"\";\r\n");
      out.write("    \tif(null==saveFileName)saveFileName=\"\";\r\n");
      out.write("    \tif(null==downloadFileName){\r\n");
      out.write("    \t\tshowMsg(\"未指定需要下载的文件名称!\");\r\n");
      out.write("    \t\treturn;\r\n");
      out.write("    \t\t\r\n");
      out.write("    \t}\r\n");
      out.write("    \tdocument.getElementById(\"fileDownload\").src=file_iframe_src+downloadFileName+'&saveFileName='+saveFileName+'&random='+encodeURI(downFlag2);\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    //-------------文件上传------------\r\n");
      out.write("    /**\r\n");
      out.write("     * 文件上传实现\r\n");
      out.write("     * @param filePath 文件路径\r\n");
      out.write("     * @param callBack 上传结束后的回调函数\r\n");
      out.write("              callBack 回调函数接收一个返回json对象，json对象数据格式如下：\r\n");
      out.write("              {\r\n");
      out.write("    \t\t\tfileName:'文件名称',\r\n");
      out.write("    \t\t\tfileId:'文件标识'\r\n");
      out.write("              }\r\n");
      out.write("     * @param subfixs  所要限制的文件类型集合，用逗号隔开(如：txt,rar,xls,doc)\r\n");
      out.write("     * @param fileField 需要上传文件所在的域名称，默认使用 'myfile'名称\r\n");
      out.write("     * \r\n");
      out.write("     *\r\n");
      out.write("     * 使用说明：\r\n");
      out.write("     * \r\n");
      out.write("       1.在需要上传文件的页面引入本页面，如：\r\n");
      out.write("         <jsp\\:include flush=\\'true\\' page=\\'../common/file_inc.jsp\\'></jsp\\:include>\r\n");
      out.write("         \r\n");
      out.write("       2.编写回调函数，接收上传文件成功后的返回值，如：\r\n");
      out.write("         function fileUploadBack(result){\r\n");
      out.write("     \t\talert(result.fileName);\r\n");
      out.write("     \t }\r\n");
      out.write("       \r\n");
      out.write("       3.在页面需要的位置上加入上传文件域，如：\r\n");
      out.write("         <input type=\\\"text\\\" id=\\\"path\\\" />\r\n");
      out.write("\t\t <input id=\\\"myfile\\\" name=\\\"myfile\\\" type=\\\"file\\\" onchange=\\\"$(\\'#path\\').val(this.value);\\\" class=\\\"fileUpload\\\" hidefocus>\r\n");
      out.write("\t\t <button type=\\\"button\\\" >浏览</button>\r\n");
      out.write("\t\t <button onclick=\\\"fileUpload($(\\'#path\\').val(),fileUploadBack,\\'txt\\')\\\" type=\\\"button\\\" >上传</button>\r\n");
      out.write("     */\r\n");
      out.write("     \r\n");
      out.write("    function fileUpload(filePath,callBack,subfixs,fileField){\r\n");
      out.write("   \t\tif(filePath == \"\") {\r\n");
      out.write("   \t\t\tshowMsg(\"请先选择需要上传的文件！\");\r\n");
      out.write("   \t\t\treturn ;\r\n");
      out.write("   \t\t}\r\n");
      out.write("   \t\t\r\n");
      out.write("   \t\t//判断格式\r\n");
      out.write("   \t\tif(null!=subfixs && subfixs!=\"*.*\"){\r\n");
      out.write("\t   \t\tvar fileSubfix = filePath.substring(filePath.lastIndexOf(\".\")+1); \r\n");
      out.write("\t   \t\tif(subfixs.indexOf(fileSubfix)<0){  \r\n");
      out.write("\t   \t\t\tshowMsg(\"文件类型不在允许范围内，请重新选择文件！\");\r\n");
      out.write("                return ;  \r\n");
      out.write("\t        }\r\n");
      out.write("   \t\t}\r\n");
      out.write("   \t\t$.ajaxFileUpload({\r\n");
      out.write("   \t\t\turl : '");
      out.print(request.getContextPath() );
      out.write("/FileUpload',\r\n");
      out.write("   \t\t\tsecureuri : false,\r\n");
      out.write("   \t\t\tfileElementId : fileField || 'myfile',\r\n");
      out.write("   \t\t\tdataType : 'json',\r\n");
      out.write("   \t\t\tbeforeSend : function() {\r\n");
      out.write("   \t\t\t},\r\n");
      out.write("   \t\t\tsuccess : function(data, status) {\r\n");
      out.write("   \t\t\t\tif (null!=data && data.success==\"true\") {\r\n");
      out.write("   \t\t\t\t\tvar fileName=data.saveFileName;\r\n");
      out.write("   \t\t\t\t\tvar relativeFileName=data.relativeFileName;\r\n");
      out.write("   \t\t\t\t\tvar fileId=fileName.substring(0,fileName.lastIndexOf(\".\"));\r\n");
      out.write("   \t\t\t\t\tvar result={\r\n");
      out.write("   \t\t\t\t\t\t\tfileName:fileName,\r\n");
      out.write("   \t\t\t\t\t\t\trelativeFileName:relativeFileName,\r\n");
      out.write("   \t\t\t\t\t\t\tfileId:fileId\r\n");
      out.write("   \t\t\t\t\t}\r\n");
      out.write("   \t\t\t\t\tcallBack(result);\r\n");
      out.write("   \t\t\t\t} else if(null!=data.message){\r\n");
      out.write("   \t\t\t\t\tvar base64CodeStr=data.message;//.replaceAll(\"@@@\",\"\\r\\n\");\r\n");
      out.write("   \t\t\t\t\tbase64CodeStr=$.base64.atob(base64CodeStr,true,'utf8')\r\n");
      out.write("   \t\t\t\t\tshowMsg(base64CodeStr);\r\n");
      out.write("   \t\t\t\t}else{\r\n");
      out.write("   \t\t\t\t\tshowMsg(\"文件上传出错！\");\r\n");
      out.write("   \t\t\t\t}\r\n");
      out.write("   \t\t\t}\r\n");
      out.write("   \t\t});\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("</script>\r\n");
      out.write("<iframe href=\"\" id=\"fileDownload\" name=\"fileDownload\" style=\"display: none\" ></iframe>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
